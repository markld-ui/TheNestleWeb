// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thenestle.Persistence.Data;

#nullable disable

namespace Thenestle.Persistence.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250622161716_ChangeConstraintInCouple3")]
    partial class ChangeConstraintInCouple3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Thenestle.Domain.Models.Couple", b =>
                {
                    b.Property<int>("CoupleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("couple_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoupleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("User1Id")
                        .HasColumnType("integer")
                        .HasColumnName("user1_id");

                    b.Property<int>("User2Id")
                        .HasColumnType("integer")
                        .HasColumnName("user2_id");

                    b.HasKey("CoupleId")
                        .HasName("couple_pkey");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("idx_couple_users_unique")
                        .HasFilter("user2_id != 0");

                    b.ToTable("couple", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_couple_users", "user2_id = 0 OR user1_id != user2_id");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.CurrencyTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("currency_transaction_pkey");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("idx_transaction_order_unique");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_transaction_user");

                    b.ToTable("currency_transaction", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_transaction_amount", "amount != 0");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastActiveAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("DeviceId")
                        .HasName("device_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("device", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_device_last_active", "last_active_at <= now()");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.FoodOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer")
                        .HasColumnName("initiator_id");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.HasKey("OrderId")
                        .HasName("food_order_pkey");

                    b.HasIndex("InitiatorId")
                        .HasDatabaseName("idx_food_order_initiator");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_food_order_status");

                    b.ToTable("food_order", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_order_approval_date", "approved_at >= created_at OR approved_at IS NULL");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Invite", b =>
                {
                    b.Property<int>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invite_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InviteId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("code");

                    b.Property<int>("CoupleId")
                        .HasColumnType("integer")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int>("InviterId")
                        .HasColumnType("integer")
                        .HasColumnName("inviter_id");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_used");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.HasKey("InviteId")
                        .HasName("invite_pkey");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_invite_code_unique");

                    b.HasIndex("CoupleId");

                    b.HasIndex("InviterId");

                    b.ToTable("invite", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_invite_expiration", "expires_at > created_at");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mood_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MoodId"));

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("emoji");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("MoodId")
                        .HasName("mood_pkey");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_mood_name_unique");

                    b.ToTable("mood", "couple_app");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.MoodEntry", b =>
                {
                    b.Property<int>("MoodEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mood_entry_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MoodEntryId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("MoodId")
                        .HasColumnType("integer")
                        .HasColumnName("mood_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MoodEntryId")
                        .HasName("mood_entry_pkey");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_mood_entry_created_at");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_mood_entry_user_id");

                    b.ToTable("mood_entry", "couple_app");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaceId"));

                    b.Property<int>("AddedById")
                        .HasColumnType("integer")
                        .HasColumnName("added_by_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.HasKey("PlaceId")
                        .HasName("place_pkey");

                    b.HasIndex("AddedById");

                    b.ToTable("place", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_latitude_range", "latitude BETWEEN -90 AND 90");

                            t.HasCheckConstraint("ck_longitude_range", "longitude BETWEEN -180 AND 180");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reminder_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReminderId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("RemindAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("remind_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ReminderId")
                        .HasName("reminder_pkey");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("idx_reminder_created_by");

                    b.HasIndex("RemindAt")
                        .HasDatabaseName("idx_reminder_remind_at");

                    b.ToTable("reminder", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_reminder_date", "remind_at > created_at");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.ReminderNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("DaysBefore")
                        .HasColumnType("integer")
                        .HasColumnName("days_before");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_sent");

                    b.Property<int>("ReminderId")
                        .HasColumnType("integer")
                        .HasColumnName("reminder_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("reminder_notification_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex("ReminderId", "IsSent")
                        .HasDatabaseName("idx_notification_reminder_status");

                    b.ToTable("reminder_notification", "couple_app", t =>
                        {
                            t.HasCheckConstraint("ck_notification_days", "days_before IN (1, 3, 7)");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_role_name_unique");

                    b.ToTable("role", "couple_app");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("user_role_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", "couple_app");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CoupleId")
                        .HasColumnType("integer")
                        .HasColumnName("couple_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CurrencyBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("currency_balance");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("couple_id")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_user_email");

                    b.HasIndex("couple_id");

                    b.ToTable("user", "couple_app", t =>
                        {
                            t.Property("couple_id")
                                .HasColumnName("couple_id1");
                        });
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Couple", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Users", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_couple_user1");

                    b.HasOne("Thenestle.Domain.Models.Users", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_couple_user2");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.CurrencyTransaction", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.FoodOrder", "Order")
                        .WithOne("Transaction")
                        .HasForeignKey("Thenestle.Domain.Models.CurrencyTransaction", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transaction_order");

                    b.HasOne("Thenestle.Domain.Models.Users", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_transaction_user");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Device", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Users", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.FoodOrder", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Users", "Initiator")
                        .WithMany("InitiatedOrders")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_initiator");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Invite", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Couple", "Couple")
                        .WithMany("Invites")
                        .HasForeignKey("CoupleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invite_couple");

                    b.HasOne("Thenestle.Domain.Models.Users", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invite_inviter");

                    b.Navigation("Couple");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.MoodEntry", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Mood", "Mood")
                        .WithMany("MoodEntries")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mood_entry_mood");

                    b.HasOne("Thenestle.Domain.Models.Users", "User")
                        .WithMany("MoodEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mood_entry_user");

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Place", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Users", "AddedBy")
                        .WithMany("Places")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_place_user");

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Reminder", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Users", "CreatedBy")
                        .WithMany("Reminders")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reminder_user");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.ReminderNotification", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Reminder", "Reminder")
                        .WithMany("Notifications")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_reminder");

                    b.HasOne("Thenestle.Domain.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user");

                    b.Navigation("Reminder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.UserRole", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role");

                    b.HasOne("Thenestle.Domain.Models.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Users", b =>
                {
                    b.HasOne("Thenestle.Domain.Models.Couple", "Couple")
                        .WithMany()
                        .HasForeignKey("couple_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Couple");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Couple", b =>
                {
                    b.Navigation("Invites");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.FoodOrder", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Mood", b =>
                {
                    b.Navigation("MoodEntries");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Reminder", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Thenestle.Domain.Models.Users", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("InitiatedOrders");

                    b.Navigation("MoodEntries");

                    b.Navigation("Places");

                    b.Navigation("Reminders");

                    b.Navigation("Transactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
